import tkinter as tk
from tkinter import messagebox, ttk
import sqlite3
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas

# Conectando ao banco de dados SQLite
conn = sqlite3.connect('escola.db')
cursor = conn.cursor()

# Criar tabelas
def criar_tabelas():
    cursor.execute('''CREATE TABLE IF NOT EXISTS professores (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        nome TEXT,
                        aulas_por_dia INTEGER,
                        aulas_por_semana INTEGER)''')
    cursor.execute('''CREATE TABLE IF NOT EXISTS turmas (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        ano TEXT,
                        serie TEXT)''')
    cursor.execute('''CREATE TABLE IF NOT EXISTS disciplinas (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        nome TEXT,
                        professor_id INTEGER,
                        turma_id INTEGER,
                        FOREIGN KEY(professor_id) REFERENCES professores(id),
                        FOREIGN KEY(turma_id) REFERENCES turmas(id))''')
    cursor.execute('''CREATE TABLE IF NOT EXISTS horarios (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        turma_id INTEGER,
                        professor_id INTEGER,
                        disciplina_id INTEGER,
                        dia TEXT,
                        hora TEXT,
                        FOREIGN KEY(turma_id) REFERENCES turmas(id),
                        FOREIGN KEY(professor_id) REFERENCES professores(id),
                        FOREIGN KEY(disciplina_id) REFERENCES disciplinas(id))''')
    
    conn.commit()

# Funções para adicionar dados
def adicionar_professor(nome, aulas_por_dia, aulas_por_semana):
    cursor.execute('INSERT INTO professores (nome, aulas_por_dia, aulas_por_semana) VALUES (?, ?, ?)', 
                   (nome, aulas_por_dia, aulas_por_semana))
    conn.commit()

def adicionar_turma(ano, serie):
    cursor.execute('INSERT INTO turmas (ano, serie) VALUES (?, ?)', (ano, serie))
    conn.commit()

def adicionar_disciplina(nome, professor_id, turma_id):
    cursor.execute('INSERT INTO disciplinas (nome, professor_id, turma_id) VALUES (?, ?, ?)', 
                   (nome, professor_id, turma_id))
    conn.commit()

def adicionar_horario(turma_id, professor_id, disciplina_id, dia, hora):
    cursor.execute('INSERT INTO horarios (turma_id, professor_id, disciplina_id, dia, hora) VALUES (?, ?, ?, ?, ?)', 
                   (turma_id, professor_id, disciplina_id, dia, hora))
    conn.commit()

# Função para exportar horários em PDF
def exportar_pdf():
    c = canvas.Canvas(f"horarios_exportados.pdf", pagesize=letter)
    c.drawString(100, 750, "Horários Semanais")
    
    # Criando uma tabela formatada
    cursor.execute('''
        SELECT h.id, p.nome, d.nome, t.ano, t.serie, h.dia, h.hora
        FROM horarios h
        JOIN professores p ON h.professor_id = p.id
        JOIN disciplinas d ON h.disciplina_id = d.id
        JOIN turmas t ON h.turma_id = t.id
    ''')
    rows = cursor.fetchall()

    c.drawString(100, 730, "ID   Professor   Disciplina   Turma   Dia   Hora")
    y = 710
    for row in rows:
        c.drawString(100, y, f"{row[0]}   {row[1]}   {row[2]}   {row[3]} {row[4]}   {row[5]}   {row[6]}")
        y -= 20

    c.save()
    messagebox.showinfo("PDF Gerado", "Horários salvos em PDF!")

# Função para visualizar e excluir horários
def visualizar_horarios():
    visualizacao_window = tk.Toplevel()
    visualizacao_window.title("Visualização de Horários")

    tree = ttk.Treeview(visualizacao_window, columns=("ID", "Professor", "Disciplina", "Turma", "Dia", "Hora"), show='headings')
    tree.heading("ID", text="ID")
    tree.heading("Professor", text="Professor")
    tree.heading("Disciplina", text="Disciplina")
    tree.heading("Turma", text="Turma")
    tree.heading("Dia", text="Dia")
    tree.heading("Hora", text="Hora")
    
    cursor.execute('''
        SELECT h.id, p.nome, d.nome, t.ano, t.serie, h.dia, h.hora
        FROM horarios h
        JOIN professores p ON h.professor_id = p.id
        JOIN disciplinas d ON h.disciplina_id = d.id
        JOIN turmas t ON h.turma_id = t.id
    ''')
    rows = cursor.fetchall()

    for row in rows:
        tree.insert("", "end", values=row)

    tree.pack(pady=10)

    def excluir_horario():
        selected_item = tree.selection()
        if not selected_item:
            messagebox.showwarning("Seleção Inválida", "Por favor, selecione um horário para excluir.")
            return
        
        horario_id = tree.item(selected_item)['values'][0]
        cursor.execute('DELETE FROM horarios WHERE id = ?', (horario_id,))
        conn.commit()
        tree.delete(selected_item)
        messagebox.showinfo("Sucesso", "Horário excluído com sucesso!")

    btn_excluir = tk.Button(visualizacao_window, text="Excluir Horário", command=excluir_horario)
    btn_excluir.pack(pady=10)

# Interface Gráfica usando Tkinter
def interface_grafica():
    root = tk.Tk()
    root.title("Organizador de Horários")
    root.configure(bg="#F5F5DC")  # Fundo bege

    # Frame para Cadastro de Professores
    frame_professores = tk.Frame(root, bg="#F5F5DC")
    frame_professores.pack(pady=10)

    tk.Label(frame_professores, text="Cadastro de Professores", bg="#F5F5DC").grid(row=0, columnspan=2)
    tk.Label(frame_professores, text="Nome do Professor", bg="#F5F5DC").grid(row=1, column=0)
    nome_professor = tk.Entry(frame_professores)
    nome_professor.grid(row=1, column=1)

    tk.Label(frame_professores, text="Aulas por Dia", bg="#F5F5DC").grid(row=2, column=0)
    aulas_por_dia = tk.Entry(frame_professores)
    aulas_por_dia.grid(row=2, column=1)

    tk.Label(frame_professores, text="Aulas por Semana", bg="#F5F5DC").grid(row=3, column=0)
    aulas_por_semana = tk.Entry(frame_professores)
    aulas_por_semana.grid(row=3, column=1)

    def salvar_professor():
        nome = nome_professor.get()
        aulas_dia = int(aulas_por_dia.get())
        aulas_semana = int(aulas_por_semana.get())
        adicionar_professor(nome, aulas_dia, aulas_semana)
        messagebox.showinfo("Sucesso", "Professor adicionado com sucesso!")

    tk.Button(frame_professores, text="Adicionar Professor", command=salvar_professor, bg="#A8D8EA").grid(row=4, columnspan=2)

    # Frame para Cadastro de Turmas
    frame_turmas = tk.Frame(root, bg="#F5F5DC")
    frame_turmas.pack(pady=10)

    tk.Label(frame_turmas, text="Cadastro de Turmas", bg="#F5F5DC").grid(row=0, columnspan=2)
    tk.Label(frame_turmas, text="Ano da Turma", bg="#F5F5DC").grid(row=1, column=0)
    ano_turma = tk.Entry(frame_turmas)
    ano_turma.grid(row=1, column=1)

    tk.Label(frame_turmas, text="Série da Turma", bg="#F5F5DC").grid(row=2, column=0)
    serie_turma = tk.Entry(frame_turmas)
    serie_turma.grid(row=2, column=1)

    def salvar_turma():
        ano = ano_turma.get()
        serie = serie_turma.get()
        adicionar_turma(ano, serie)
        messagebox.showinfo("Sucesso", "Turma adicionada com sucesso!")

    tk.Button(frame_turmas, text="Adicionar Turma", command=salvar_turma, bg="#A8D8EA").grid(row=3, columnspan=2)

    # Frame para Cadastro de Disciplinas
    frame_disciplinas = tk.Frame(root, bg="#F5F5DC")
    frame_disciplinas.pack(pady=10)

    tk.Label(frame_disciplinas, text="Cadastro de Disciplinas", bg="#F5F5DC").grid(row=0, columnspan=2)
    tk.Label(frame_disciplinas, text="Nome da Disciplina", bg="#F5F5DC").grid(row=1, column=0)
    nome_disciplina = tk.Entry(frame_disciplinas)
    nome_disciplina.grid(row=1, column=1)

    tk.Label(frame_disciplinas, text="ID do Professor", bg="#F5F5DC").grid(row=2, column=0)
    id_professor = tk.Entry(frame_disciplinas)
    id_professor.grid(row=2, column=1)

    tk.Label(frame_disciplinas, text="ID da Turma", bg="#F5F5DC").grid(row=3, column=0)
    id_turma = tk.Entry(frame_disciplinas)
    id_turma.grid(row=3, column=1)

    def salvar_disciplina():
        nome = nome_disciplina.get()
        professor_id = int(id_professor.get())
        turma_id = int(id_turma.get())
        adicionar_disciplina(nome, professor_id, turma_id)
        messagebox.showinfo("Sucesso", "Disciplina adicionada com sucesso!")

    tk.Button(frame_disciplinas, text="Adicionar Disciplina", command=salvar_disciplina, bg="#A8D8EA").grid(row=4, columnspan=2)

    # Frame para Gerenciamento de Horários
    frame_horarios = tk.Frame(root, bg="#F5F5DC")
    frame_horarios.pack(pady=10)

    tk.Button(frame_horarios, text="Exportar Horários", command=exportar_pdf, bg="#A8D8EA").pack(side=tk.LEFT, padx=5)
    tk.Button(frame_horarios, text="Visualizar Horários", command=visualizar_horarios, bg="#A8D8EA").pack(side=tk.LEFT, padx=5)

    root.mainloop()

# Criação das tabelas
criar_tabelas()

# Execução da interface gráfica
interface_grafica()

# Fechar a conexão com o banco de dados ao sair
conn.close()
